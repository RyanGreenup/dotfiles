# https://github.com/gokcehan/lf/blob/master/etc/lfrc.example
set shell sh
# TODO change to fish or elvish
# TODO set a bunch of \t for task management

set previewer ~/.config/lf/pv.sh
map i $~/.config/lf/pv.sh $f | less -R

map <a-h> ${{
    # lf -remote "send $id set ratios 1:3"
    help="
     Description  Shortcut
     ---------------------
     Alt +         Wide View
     Alt -         Normal View
     Alt 0         Narrow View
     +             +30 m
     -             -30 m       "
    echo "${help}" |bat --paging=always --color=always

}}


map <a-=> ${{
    lf -remote "send $id set ratios 1:1:1:1:3:5"
}}
map <a--> ${{
    lf -remote "send $id set ratios 1000:1618"
}}
map <a-0> ${{
    lf -remote "send $id set ratios 1:2:3"
}}

map gp ${{
    git checkout HEAD~1
}}

map n ${{
    git checkout master
    ## TODO
    ## next_hash=$(git reflog | head -n 2 | tail -n 1 | cut -f 1 -d ' ')
    ## git checkout $next_hash
}}



map <a-8> ${{
    rm -r "${f}"
}}



map <c-r> ${{
    dirname='$(basename "${f}")'
    brn
}}


set drawbox

# Set Multiple Columns
${{
    w=$(tput cols)
    if [ $w -le 80 ]; then
        lf -remote "send $id set ratios 1:2"
    elif [ $w -le 160 ]; then
        lf -remote "send $id set ratios 1:2:3"
    else
        lf -remote "send $id set ratios 1:2:3:5"
    fi
}}

# Jump back
map <c-o> jump-prev

# Dummy binding for debugging
map a aaa
cmd aaa ${{
    date >> /tmp/a
}}


# https://github.com/gokcehan/lf/wiki/Integrations
cmd fzf_jump ${{
    res="$(fd | fzf --preview 'bat {} --color always' --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}
map <c-f> :fzf_jump

cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}
map gs :fzf_search


cmd yank-path $printf '%s' "$fx" | xclip -i -selection clipboard
map Y :yank-path

# Task Management stuff
## Toggle Tasks
map od ${{
    # Toggle done status of task
    filename="${f##*/}"
    task_manager toggle "${filename}"
}}

map oa ${{
    # Archive a task
    filename="${f}"
    task_manager archive "${filename}"

}}

map os ${{
    # Reschedule a Task to a different day
    task_manager reschedule date "${f}" $HOME/Agenda/Agenda_Maybe/Scheduled 300
}}


# Refile Project
map or ${{
    # Refile a task file that has a Project tag
    task_manager project refile "${f}" ~/Agenda/Agenda_Maybe/Projects
}}

# Add Tags to file
map ot ${{
    # Tag a task file

    choose_tag() {

        fd -0  '\.md$' ~/Agenda/Agenda_Maybe/Scheduled/ | xargs -0 cat |\
            rg '(\s|^):([\w\s/]+):(\s|$)'  -r '$2' -o |\
            sort -u |\
            fzf
    }

    choose_file() {
        cd "$HOME/Agenda/Agenda_Maybe/Scheduled/"
        fd  '\.md$' | fzf --preview 'bat {} --color=always --style=plain,header,rule'
    }

    # Only add the tag if it's not already there
    t="$(choose_tag)"
    grep "${t}" "${f}" || \
        printf '\n:%s:\n' "${t}" >> "${f}"
}}


map = ${{
    # Set 30 minutes Earlier
  # map oj ${{
    filename="${f##*/}"
    new_file=$(task_manager reschedule time "${filename}" 30)
}}

map - ${{
    # Set 30 minutes later
    # map ok ${{
    filename="${f##*/}"
    new_file=$(task_manager reschedule time "${filename}" -- -30)
}}
