#+title: Fish Config
:CONFIG:
#+property: header-args:fish :tangle (concat (file-name-sans-extension (buffer-file-name)) ".fish")
#+property: header-args :mkdirp yes :comments no
#+startup: indent
:END:


#+author: Ryan Greenup

* Set Path Variables
** Default Pahts
#+begin_src fish
# Set PATH
set PATH /usr/local/bin/            $PATH
set PATH $HOME/.local/bin           $PATH
set PATH $HOME/bin                  $PATH
set PATH $HOME/.cargo/bin           $PATH
set PATH $HOME/.gem/ruby/2.7.0/bin/ $PATH
set PATH $HOME/go/bin               $PATH
set PATH $PATH $HOME/.local/share/gem/ruby/3.0.0/bin
#+end_src
** Appimages
#+begin_src fish
# Add AppImages
set PATH $PATH $HOME/Applications/AppImages/bin/
#+end_src
** Flatpak
#+begin_src fish
# Add Flatpak
set PATH $PATH /var/lib/flatpak/exports/bin/
set XDG_DATA_DIRS $XDG_DATA_DIRS:/var/lib/flatpak/exports/share/
#+end_src
** Neovim
I use [[https://github.com/williamboman/mason.nvim#setup][Mason]] with Neovim and so it's necessary to add that to the path:

#+begin_src fish
set PATH $HOME/.local/share/nvim/mason/bin/  $PATH
#+end_src

Mason probably isn't needed for something like [[https://wiki.archlinux.org/][arch]] where utilities like [[https://archlinux.org/packages/community/any/pyright/][pyright]]
and [[https://archlinux.org/packages/community/x86_64/tree-sitter/][treesitter-fish]] are packaged, but on something like [[https://voidlinux.org/][void]] it's pretty
helpful.
** Nix
Nix has been removed:

  + Broke R, regardless of whether R wis installed through =nix= or =xbps=
    + xml2 and other packages would not install correctly
  + Broke the integrated terminal in VSCode and Neovim

Nonetheless, this was the config I was using:

#+begin_src fish :tangle no
set PATH $PATH $HOME/.nix-profile/bin/
for dir in (ls "/nix/var/nix/profiles/per-user/")
    set XDG_DATA_DIRS $XDG_DATA_DIRS:/nix/var/nix/profiles/per-user/$dir/profile/share/
end
#+end_src
* Environment variables
#+begin_src fish
# Set Default Editor to Emacs
# set VISUAL 'emacs -nw --eval "(add-hook \'emacs-startup-hook #\'sh-mode)"'
export VISUAL=nvim
export EDITOR=nvim
#+end_src
** Editor
** Torch
If using =tch-rs= and CUDA it is necessary to download =libtorch= manually.

If not using CUDA don't use this, it should only run if =/opt/libtorch= exists
as a directory, if it inadvertently runs use =set -e LIBTORCH= to unset the
variable before running a =tch= project.
#+begin_src fish
if test -d /opt/libtorch
    export LIBTORCH=/opt/libtorch
    export LD_LIBRARY_PATH="$LIBTORCH"/lib:"$LD_LIBRARY_PATH"
end
#+end_src
* Alias
** Vim
#+begin_src fish
function v --wraps=nvim --description 'alias v=nvim'
  nvim $argv;
end
#+end_src

** Shorter Coreutils
#+begin_src fish
function f --wraps='cd ; exa -RGL 3' --description 'alias f=cd; exa -RGL 3'
    cd $argv
    exa -TL 2
    exa
end

function l --wraps='cd ; exa -RGL 3' --description 'alias f=cd; exa -RGL 3'
    cd $argv
    exa -TL 2
    exa
end


## Better LS
function ls! --wraps='ls -ultrah' --description 'alias ls!=ls -ultrah'
    ls -ultrah $argv
end
#+end_src

** Clipboard
#+begin_src fish
## Easier Xclip
function x --wraps='xclip -selection clipboard' --description 'Alias for xclip'
    xclip -selection clipboard $argv
end

#+end_src
** Weather
#+begin_src fish
## Easy weather
function wtr
    # TODO put a test of age in here
    if test -f /tmp/weather.txt
        set have_weather true
    else
        set have_weather false
    end


    if $have_weather
        bat /tmp/weather.txt
    else
        curl v2.wttr.in > /tmp/weather.txt && set have_weather true
        curl wttr.in >> /tmp/weather.txt && set have_weather true
    end

    if ! $have_weather
        echo "Unable to download weather"
    end
end

#+end_src
** Man pages
#+begin_src fish
# Man pages
function vman
    man $argv[1] | nvim -MR +"set filetype=man" -
end
#+end_src
** program Kill
#+begin_src fish
function k!
    ps -aux | grep $argv[1] | awk '{print $2}' | xargs kill
end
#+end_src
** Open Dokuwiki Files
#+begin_src fish
function open_dokuwiki_clipboard
   set file \
       (xclip -sel clip -o |\
          awk -F '/' '{print $NF}' |\
          awk -F '=' '{print $NF}' |\
          sed 's#:#/#' |\
          sed 's#$#.txt#' |\
          sed 's#^#~/Notes/dokuwiki/data/pages/#')
    emacsclient -c $file
end

#+end_src
** Toggle Alacritty Theme
#+begin_src fish
# Toggle Alacritty theme
function tt
    # If the colors: line is found, use sed to change it to dark or light
    grep  'colors: \*light' ~/.config/alacritty/alacritty.yml && sed -i  's!colors:\ \*light!colors: *dark!' ~/.config/alacritty/alacritty.yml && return 0
    grep  'colors: \*dark'  ~/.config/alacritty/alacritty.yml && sed -i  's!colors:\ \*dark!colors: *light!' ~/.config/alacritty/alacritty.yml && return 0
end
#+end_src
* Shell Utilities
** Broot
#+begin_src fish
if status is-interactive
    broot --print-shell-function fish | source
end
#+end_src
** Zoxide
#+begin_src fish
if status is-interactive
    zoxide init fish | source
end
#+end_src
** Atuin
Atuin is not used as it caused the shell to stutter and lag. Atuin is very slow
to initialize and fish will auto-suggest history. The suspicion arises, that
this history suggestion, with Atuin, induces stutter.

#+begin_src fish :tangle no
if status is-interactive
    set -gx ATUIN_NOBIND "true"
    atuin init fish | source

    # bind to ctrl-r in normal and insert mode, add any other bindings you want here too
    bind \cr _atuin_search
    bind -M insert \cr _atuin_search
end
#+end_src
** LF
*** Cd
#+begin_src fish
function lfcd
    set tmp (mktemp)
    lf -last-dir-path=$tmp $argv
    if test -f "$tmp"
        set dir (cat $tmp)
        rm -f $tmp
        if test -d "$dir"
            if test "$dir" != (pwd)
                cd $dir
            end
        end
    end
end
#+end_src
* Notetaking
** Base functions
#+begin_src fish
# ..............................................................................
# * Notetaking Stuff ...........................................................
# ..............................................................................
set __agenda_dir $HOME/Agenda
set __notes_dir $HOME/Notes
set __notes_old $HOME/Sync/Notes
set __notes_dw  /srv/http/dokuwiki/data
set __note_taking_dirs $__notes_dir $__notes_old $__notes_dw

# git
function __try_run
    command -v $argv[1] > /dev/null 2>&1 && $argv[1]
end

function __git_helper
    __try_run gitui || lazygit
end

function gn
    cd $__notes_dir && __git_helper
end

function gt
    cd $__agenda_dir && __git_helper
end

# open non empty arguments in EDITOR
function _private_open
  if [ ! (count $argv) -eq 0 ]
      $EDITOR $argv
  end
end
#+end_src
** Searching
#+begin_src fish
# ** Searching .................................................................
function _private_search
    set notes_dir $argv
    cd $notes_dir

        sk -m -i -c "note_taking search -d "$notes_dir"  {}"        \
            --bind pgup:preview-page-up,pgdn:preview-page-down      \
            --preview "bat --style grid --color=always              \
                            --terminal-width 80 $notes_dir/{+}      \
                            --italic-text=always                    \
                            --decorations=always"                |  \
        sed "s#^#$notes_dir/#"
end


# *** Search New notes
function ns
    _private_open (_private_search $__notes_dir)
end

# *** Search ALL notes
# I symlinked ~/Notes under ~/Sync/Notes to catch it in this (excludes dokuwiki though)
function nso
    _private_open (_private_search $__notes_old)
end

function nsd # Dokuwiki
    _private_open (_private_search $__notes_dw)
end

# *** Reindex notes

function nR
  for dir in $__note_taking_dirs
    echo $dir
    note_taking reindex -d $dir
  end
end

function nr
    note_taking reindex -d $__notes_dir
end




#+end_src
** Finding
#+begin_src fish
# ** Finding ......................................................................
## I could have used `note_taking fzf` but skim and bat is prettier
function _private_finding
   # use ls -t to sort by time (default is modification time)
    ls -t (fd -t f '\.org$|\.md$|\.txt$' $argv) |
        sk --ansi -m -c 'rg -l -t markdown -t org -t txt --ignore-case "{}"' \
            --preview "bat --style snip {} 2> /dev/null --color=always" \
            --bind 'ctrl-f:interactive,pgup:preview-page-up,pgdn:preview-page-down'
end

# *** Find main notes
function nf --description 'Find Notes'
    _private_open (_private_finding $__notes_dir)
end

# *** Find ALL notes
function nF
    # Find the notes and open if not cancelled
    _private_open (_private_finding $__note_taking_dirs)
end

function nfm
  ~/.local/bin/mediawikisearch.bash
end

function nn
    note_taking new -d "$__notes_dir"
end

function nno
    echo "Enter note Title:"
    set title (read)
    echo $notes_dir
    set file (readlink -f "$__notes_dir/pages/$title.org") # use readlink to clean path
    echo "# $title" >> $file
    emacs $file
end

function nnm
    echo "Enter note Title:"
    set title (read)
    echo $notes_dir
    set file (readlink -f "$__notes_dir/pages/$title.md") # use readlink to clean path
    echo "# $title" >> $file
    $EDITOR $file
end
#+end_src
* Package Management


TODO Look at this because it would be better for =pZ=
#+begin_src fish :tangle no
set aur_helper yay
if test (command -v paru)
    set aur_helper paru
end
#+end_src

#+begin_src fish
# ..............................................................................
# * Package Management Stuff....................................................
# ..............................................................................

# Packages in Repository
function get_os
    cat /etc/os-release | grep -e '^ID=' | cut -d '=' -f 2 | sed 's/"//g'
end

function void_query_packages
    xbps-query -Rs '' |\
        rg -o '[\w-]+-'  |\
        sed 's!-$!!'     |\
        fzf --multi --preview \
            'xbps-query -S {} || echo No Info Available'
end

function arch_pz
    pacman -Slq | fzf --multi --preview 'pacman -Si {1}' | xargs -ro sudo pacman -S $argv
end

function pz --description 'Fuzzy Find to preview and install packages'
    switch (get_os)
    case 'void'
        if set packages (void_query_packages)
            doas xbps-install $packages
        end
    case 'arch'
        arch_pz
    case 'endeavouros'
        arch_pz
    case "*"
        echo "Operating System $os is not configured"
    end
end

# All Available Packages
function pZ --description 'Fuzzy Find to preview and install with pacman'
    paru -Slq | fzf --multi --preview 'paru -Si {1}' | xargs -ro paru -S --noconfirm --needed $argv
end

# Open work Dispatcher
function wk --description 'Alias for work script' --wraps='workdispatch'
    emacsclient --create-frame ~/Agenda/todo.org ~/Agenda/projects.org & disown
end
#+end_src
* Git Dotfiles
#+begin_src fish
set dotfiles_dir $HOME/.local/share/dotfiles
function gd
    git --work-tree $HOME --git-dir $dotfiles_dir $argv
end
function gdui
    gitui --polling -w $HOME -d $dotfiles_dir
end
#+end_src
* Keybindings
#+begin_src fish
# Create keybindings
function fish_user_key_bindings
	fzf_key_bindings
end
bind \en '
    set tmp (mktemp)       && \
    lf -last-dir-path=$tmp && \
    z (cat $tmp)
    rm $tmp
    commandline -f repaint'

bind \co '
    set tmp (mktemp)    && \
    broot --outcmd $tmp && \
    z (
        sed "s/^cd //g" < $tmp | sed "s/\"//g")
    rm $tmp
    commandline -f repaint'
#+end_src
