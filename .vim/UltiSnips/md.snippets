global !p
texMathZones = ['texMathZone'+x for x in ['A', 'AS', 'B', 'BS', 'C',
'CS', 'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS',
'J', 'JS', 'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z']]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal



context "math()" 
snippet || "Modulus Operator" wA
\left| $1 \right|$0
endsnippet


context "math()"
snippet cc "Subset" wA
    \subset $0
endsnippet

context "math()"
snippet ra "Subset" wA
    \rightarrow $0
endsnippet


context "math()"
snippet lim "Limits" wA
\lim_{$1}\left[ $2 \right]$0
endsnippet

context "math()"
snippet lid "Limits" wA
\lim_{\Delta Z\rightarrow 0}\left[ $1 \right]$0
endsnippet

context "math()"
snippet pr "PaRenthesis" iA
\left( $1 \right)$0
endsnippet

snippet cols "Multiple Columns"
\begin{multicols}{2}
  \begin{align*}
    a=b
  \end{align*}\break
  \begin{align*}
    b=c
  \end{align*}
\end{multicols}
endsnippet


context "math()"
snippet sr "^2" iA
^2
endsnippet


context "math()"
snippet br "BRackets" iA
\left[ $1 \right]$0
endsnippet

context "math()"
snippet mod "Modulus Operator" wA
\left| $1 \right|$0
endsnippet


snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
$$
$1
$$$0
endsnippet

context "math()"
snippet ti "times" iA
\times $0
endsnippet


context "math()"
snippet do "times" iA
\cdot  $0
endsnippet


context "math()"
snippet pl "add" iA
+ $0
endsnippet


context "math()"
snippet mi "add" iA
- $0
endsnippet

context "math()"
snippet ee "equal" iA
= $0
endsnippet


context "math()"
snippet ae "equal" iA
&= $0
endsnippet

context "math()"
snippet imp "equal" iA
 \implies  $0
endsnippet


context "math()"
snippet nim "equal" iA
 \centernot\implies $0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet


context "math()"
priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet


context "math()"
priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet 


context "math()"
snippet sc "Complex" wA
\mathbb{C}$0
endsnippet

context "math()"
snippet rls "Reals" wA
\mathbb{R}$0
endsnippet

context "math()"
snippet sz "integer" 
\mathbb{Z}$0
endsnippet


context "math()"
snippet sn "Natural" wA
\mathbb{N}$0
endsnippet


context "math()"
snippet uun "underscore" iA
__$0
endsnippet


snippet bxmk  "makeabox" wA
\begin{tcolorbox}

${1: Top Text} 
\begin{align}
${2: 3&=x} & \text{${3:desc}}
\end{align}
${4:text}
\end{tcolorbox}
$0
endsnippet

snippet indmk "Make Indented section" wA
\ \\

\hfill\begin{minipage}{\dimexpr\textwidth-3cm}
${1: \lipsum[2]}
\end{minipage}
\ \\

$0
endsnippet


snippet qed "underscore" wA
\begin{flushright}
{\rule{0.7em}{0.7em}}
\end{flushright}
 $0
endsnippet

snippet CR "CauchyR"
the \textit{Cauchy Riemann} equations $0
endsnippet

context "math()"
snippet d "differential Operator" w
\operatorname{d} $0
endsnippet

context "math()"
snippet pd "Partial Derivative Operator" w
\partial $0
endsnippet


context "math()"
snippet ddz "underscore" wA
\frac{\operatorname{d} }{\operatorname{d} z}
endsnippet


context "math()"
snippet ddx "Derivative Rto x Operator" wA
\frac{\operatorname{d}$1 }{\operatorname{d} x}
endsnippet


context "math()"
snippet ddt "Derivative Rto x Operator" wA
\frac{\operatorname{d}$1 }{\operatorname{d} t}
endsnippet

context "math()"
snippet px "partial op respect x" wA
\frac{\partial $1  }{\partial x} $0
endsnippet


context "math()"
snippet py "partial op respect y" wA
\frac{\partial $1 }{\partial y} $0
endsnippet


context "math()"
snippet pux "CR components" wA
\frac{\partial u }{\partial x}
endsnippet

context "math()"
snippet puy "CR components" wA
\frac{\partial u }{\partial y}
endsnippet

context "math()"
snippet pvx "CR components" wA
\frac{\partial v }{\partial x}
endsnippet


context "math()"
snippet pvy "CR components" wA
\frac{\partial v }{\partial x}
endsnippet

context "math()"
snippet cis "Cis" wA
\cis{$1}$0
endsnippet

context "math()"
priority 10
snippet "op" "operator" riA
\operatorname{$1}$0
endsnippet


context "math()"
priority 100
snippet "([a-zA-Z][a-zA-Z][a-zA-Z])op" "operator" riA
\operatorname{`!p snip.rv=match.group(1)`}
endsnippet

context "math()"
snippet cos "Cos" wA
\cos{$1}$0
endsnippet


context "math()"
snippet sin "sin" wA
\sin{$1}$0
endsnippet

context "math()"
snippet neq "noteq" wA
\neq$0
endsnippet



context "math()"
snippet log "complexnaturallog" wA
\log_e{\left( $1 \right) }$0
endsnippet

context "math()"
snippet Log "complexnaturallog" wA
\Log_e{\left( $1 \right) }$0
endsnippet

context "math()"
snippet ln "complexRealLog" wA
\ln{ $1 }$0
endsnippet

snippet iff "if only" 
if and only if
endsnippet


context "math()"
snippet intp "Integral" wA
\int^{$1}_{$2}\left( $3 \right) \operatorname{d}$4 $0
endsnippet


context "math()"
snippet int "Integral" wA
\int^{$1}_{$2} $3  \operatorname{d}$4 $0
endsnippet


context "math()"
snippet sum "sum" wA
\sum^{$1}_{$2}   $0
endsnippet

snippet adm "align" wA
$$
\begin{align*}
$1
\end{align*}
$$
$0
endsnippet


context "math()
snippet lla "NewLine" Ai
\label{${1: descriptive name }} \\\
$0
endsnippet

context "math()
snippet kk "NewLine" Ai
\notag \\\ 
$0
endsnippet

snippet fvf "align" A
\begin{align}
$1
\end{align}$0
endsnippet

snippet eqn "labelled equation" A
$$
\begin{equation}
  ${1: Content}
  \label{${2: label}
\end{equation}
$$
endsnippet

snippet agd "aligned" A
$$
\begin{aligned}
$1
\end{aligned}$0
$$
endsnippet

snippet CGT "CG Theorem"
the \textit{Cauchy-Goursat Theorem}
endsnippet

snippet nt "notag"
\notag
endsnippet

snippet fld "Folding"
<details><summary>${1:ClickHere}</summary>
<p>
${2:HideMe}
</p>
</details>
$0
endsnippet

snippet sit "subitem"
\subitem $0
endsnippet

context math()
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet


context math()
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet fx "function" wA
f \left( x \right) $0
endsnippet

context "math()"
snippet intbysub "subtemp" wA
\begin{matrix}
    u&= ${1:u-value} && \operatorname{d} v&= ${2: dv-value} \operatorname{d} x\\
    \operatorname{d} u&= ${3:du-value} \operatorname{d} x &&v&= ${4: v-valuel} 
\end{matrix}
endsnippet


context "math()"
snippet pto "Proportional" wA
\propto $0
endsnippet

context "math()"
snippet bnm "binomial" wA
\binom{$1}{$2} $0
endsnippet



snippet m``` "Mathematica Listings" wA
\begin{lstlisting}[language = Mathematica]
${1: The Verbatim Code}
\end{lstlisting}	
endsnippet


snippet r``` "Mathematica Listings" wA
\begin{lstlisting}[language = r]
${1: The Verbatim Code}
\end{lstlisting}	
endsnippet

snippet `` "inline Code" wA
\verb|${1: }| $0
endsnippet

snippet sddesc "SmartDiagram Descriptive" wA
\begin{center}
\smartdiagram[descriptive diagram]{
{${1: Bubble}, ${2: Text}},
{${3: Bubble}, ${4: Text}},
{${5: Bubble}, ${6: Text}},
{${7: Bubble}, ${8: Text}},
}
\end{center}
\end{document}
endsnippet

snippet rmse "rmse shortcut" wA
\textit{\textbf{RMSE}}
endsnippet

snippet rss "rss shortcut" wA
\textit{\textbf{RSS}}
endsnippet

snippet isl "ISL Shortcut"
ISL \cite{ISL}
endsnippet

snippet r "R programming Language"
\textsf{\textbf{\textit{R}}}
endsnippet

snippet itt "Mid proof Text" wA
\intertext{${1: Text}} \notag \\\
$0
endsnippet


snippet tt "Mid proof Text" wA
\text{${1: Text}} $0
endsnippet

snippet assign "Assignment Table"
%\begin{table}
%  \centering
\begin{tabular}{|cp{0.8\linewidth}}
    $t$ &  be the time (variable) since the last dose was administered \\
    $T$ & be the constant time between doses \\
endsnippet



context "math()"
priority 10
snippet "vec" "vec" riA
\vec{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])vec" "vec" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet



context "math()"
priority 10
snippet "bf" "bf" riA
\mathbf{$1}$0
endsnippet

context "math()"
priority 100
snippet "([a-zA-Z])bf" "bf" riA
\mathbf{`!p snip.rv=match.group(1)`}
endsnippet



context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet


snippet nttg "Note Tag" wA
<p style = "font-family:Courier New,Courier, monospace,serif;font-size:22px;font-style:italic; " align="right"  color=blue>
    <b> 
        #standardise<br>
    </b>
</p>
endsnippet


