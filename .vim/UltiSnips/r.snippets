
############################################################
############### Default Ones ###############################
############################################################


priority -20

global !p
import os
from vimsnippets import complete

FIELD_TYPES = [
'character',
'data.frame',
'integer',
'list',
'logical',
'matrix',
'numeric',
'vector']
endglobal

snippet #! "#!/usr/bin/env Rscript" b
#!/usr/bin/env Rscript
$0
endsnippet

snippet setwd "Set workingdir" b
setwd("${1:`!p snip.rv = os.getcwd()`}")
endsnippet

snippet as "Apply type on variable" w
as.$1`!p snip.rv = complete(t[1], FIELD_TYPES)`($2${VISUAL})
endsnippet

snippet is "Test type on variable" w
is.$1`!p snip.rv = complete(t[1], FIELD_TYPES)`($2${VISUAL})
endsnippet

snippet dl "Download and install a package" b
download.file("${1:${VISUAL:url to package}}", destfile = "${2:${1/.*\/(\S*)$/(?1:$1)/ga}}")
install.packages("$2", type = "source", repos = NULL)
library("${3:${2/^(\w+)_.*$/(?1:$1)/ga}}")
endsnippet

snippet lib "Import a library"
library('${0:${VISUAL:package}}')
endsnippet

snippet req "Require a file"
require('${0:${VISUAL:package}}')
endsnippet

snippet source "Source a file"
source('${0:${VISUAL:file}}')
endsnippet

snippet if "If statement"
if ($1) {
	${0:${VISUAL}}
}
endsnippet

snippet eif "Else-If statement"
else if ($1) {
	${0:${VISUAL}}
}
endsnippet

snippet el "Else statement"
else {
	${0:${VISUAL}}
}
endsnippet

snippet ife "if .. else"
if ($1) {
	${2:${VISUAL}}
} else {
	$0
}
endsnippet

snippet wh "while loop"
while($1) {
	${0:${VISUAL}}
}
endsnippet

snippet for "for loop"
for (${1:item} in ${2:list}) {
	${0:${VISUAL}}
}
endsnippet

snippet fun "Function definition"
${1:name} <- function ($2) {
	${0:${VISUAL}}
}
endsnippet

snippet ret "Return call"
return(${0:${VISUAL}})
endsnippet

snippet df "Data frame"
${1:name}[${2:rows}, ${0:cols}]
endsnippet

snippet c "c function"
c(${0:${VISUAL:items}})
endsnippet

snippet li "list function"
list(${0:${VISUAL:items}})
endsnippet

snippet mat "matrix function"
matrix(${1:${VISUAL:data}}, nrow = ${2:rows}, ncol = ${0:cols})
endsnippet

snippet apply "apply function"
apply(${1:${VISUAL:array}}, ${2:margin}, ${0:function})
endsnippet

snippet lapply "lapply function"
lapply(${1:${VISUAL:list}}, ${0:function})
endsnippet

snippet sapply "sapply function"
sapply(${1:${VISUAL:list}}, ${0:function})
endsnippet

snippet vapply "vapply function"
vapply(${1:${VISUAL:list}}, ${2:function}, ${0:type})
endsnippet

snippet mapply "mapply function"
mapply(${1:${VISUAL:function}}, ${0:...})
endsnippet

snippet tapply "tapply function"
tapply(${1:${VISUAL:vector}}, ${2:index}, ${0:function})
endsnippet

snippet rapply "rapply function"
rapply(${1:${VISUAL:list}}, ${0:function})
endsnippet

snippet pl "Plot function"
plot(${1:${VISUAL:x}}, ${0:y})
endsnippet

snippet ggp "ggplot2 plot"
ggplot(${1:${VISUAL:data}}, aes(${0:aesthetics}))
endsnippet

snippet fis "Fisher test"
fisher.test(${1:x}, ${0:y})
endsnippet

snippet chi "Chi Squared test"
chisq.test(${1:x}, ${0:y})
endsnippet

snippet tt "t-test"
t.test(${1:x}, ${0:y})
endsnippet

snippet wil "Wilcox test"
wilcox.test(${1:x}, ${0:y})
endsnippet

snippet cor "Correlation test"
cor.test(${1:x}, ${0:y})
endsnippet

snippet fte "FTE test"
var.test(${1:x}, ${0:y})
endsnippet

snippet kvt "KV test"
kv.test(${1:x}, ${0:y})
endsnippet

#################################
#  easily create string vector  #
#################################
# Given individual words separated by spaces
# Select words (e.g. shift-v for whole line (such as the line above)
# then press <Tab> then type "vec", press <Tab> again to get this:
# var <- c("#","Given","individual","words","separated","by","spaces")
# var <- c("#","type","out","individual","words","separated","by","spaces")
snippet vec
${1:var} <- c("${0:${VISUAL:/ /","/g}}")
endsnippet

snippet numvec
${1:var} <- c(${0:${VISUAL:/ /, /g}})
endsnippet









############################################################
################# My Snippets ##############################
############################################################



snippet pacman "Load Necessary Packages" 

# Test and install pacman package
if (require('pacman')) {
  library('pacman')
} else{
  install.packages('pacman')
  library('pacman')
}

# Use Pacman to install other useful packages
pacman::p_load(tidyverse, rmarkdown, dplyr, plotly, EnvStats, mise, $1)

mise()

$0
endsnippet


snippet PlotHist "Plot a Base Histogram From EnvInfo"

    # Plot the Confidence Interval --------------------------------------------
    #The histogram of possible values, corresponds to a normal distribution along the y-axis
    # This normal distribution will have a mean value of the fitted y-value
    # The standard deviation will correspond to a normal distribution where the Z-value occurs at 41.9 rather than 1.96
    
    mean_conf_y <- predict(ozone_mult.lm, fcastvals, level=alphaint, interval='confidence')[1]
    sd_conf_y <- -(upr_conf-mean_conf_y)/qnorm(0.025, mean=0, sd=1)
    
    possibleyvals_conf <- rnorm(n=100000, mean=mean_conf_y, sd=sd_conf_y)
    hist(possibleyvals_conf, prob=TRUE, lwd=2, main = "Confidence Interval",
         xlab = "log(ozone)", border = "#9da4ff", col = "#9dfff8", breaks = 15 ) #Prob chooses probability of frequency for the histogram.
    mtext(" There is a 95% probability that the mean value of the log(ozone) (y-value)is contained therein", font = 2)
    curve(dnorm(x, mean=mean(mean_conf_y), sd=sd(possibleyvals_conf)), add=TRUE, col="#6dc979", lwd=3) #Draws the actual density function
    #lines(density(possibleyvals_conf), col='purple', lwd=2) #Draws the observed density function
    
    abline(v=upr_conf, col='#9da4ff', lwd=5)  
    abline(v=lwr_conf, col='#9da4ff', lwd=5)
    abline(v=mean_conf_y, lwd=2, lty='dotted')  
    mtext(print(round(mean_conf_y),2), 1:0, font = 2 )
    
    ##Plot the old Prediction graphics
      curve(
        dnorm(
          x, mean=mean(3.22), sd=0.1729315
          ), add=TRUE,
        col="#cf70ff",
        lwd=3, lty=5) #Draws the actual density function
      #(from the old regression prediction)
      #abline(v=2.8, col='#cf70ff', lwd=3, lty=5)  
      #abline(v=3.4, col='#cf70ff', lwd=3, lty=5)
    
    
endsnippet

